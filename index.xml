<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on raviger</title><link>https://kyeotic.github.io/raviger/</link><description>Recent content in Documentation on raviger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 Mar 2020 20:17:16 -0800</lastBuildDate><atom:link href="https://kyeotic.github.io/raviger/index.xml" rel="self" type="application/rss+xml"/><item><title>useRoutes</title><link>https://kyeotic.github.io/raviger/api/useroutes/</link><pubDate>Fri, 27 Sep 2019 15:06:34 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/useroutes/</guid><description>This hook is the main entry point for an application using raviger.
API function useRoutes( routes: { [key: string]: (props: { [k: string]: any }) =&amp;gt; JSX.Element }, options?: { basePath?: string routeProps?: { [k: string]: any } overridePathParams?: boolean matchTrailingSlash?: boolean } ): JSX.Element Basic The first parameter is an object of path keys whose values are functions that return a ReactElement (or null when no match is found).</description></item><item><title>useRedirect</title><link>https://kyeotic.github.io/raviger/api/useredirect/</link><pubDate>Fri, 27 Sep 2019 15:06:34 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/useredirect/</guid><description>This hook causes a browser redirect to occur if its predicateUrl matches.
API export function useRedirect( predicateUrl: string, targetUrl: string, queryParams?: QueryParam | URLSearchParams, replace?: boolean ): void Basic If predicateUrl is the current path, redirect to the targetUrl. queryObj is optional, and uses the same serializer that useQueryParams uses by default. If replace (default: true) it will replace the current URL (back button will skip the predicateUrl).
import { useRedirect } from &amp;#39;raviger&amp;#39; function Route () { // Will redirect to &amp;#39;/new&amp;#39; if current path is &amp;#39;/old&amp;#39; useRedirect(&amp;#39;/old&amp;#39;, &amp;#39;/new&amp;#39;, { name: &amp;#39;kyeotic&amp;#39; }) return &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt; }</description></item><item><title>Link</title><link>https://kyeotic.github.io/raviger/api/link/</link><pubDate>Mon, 30 Sep 2019 18:16:24 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/link/</guid><description>A React component for rendering a &amp;lt;a&amp;gt; that uses history navigation for local URLs.
API export interface LinkProps extends React.AnchorHTMLAttributes&amp;lt;HTMLAnchorElement&amp;gt; { // Unlike normal &amp;lt;a&amp;gt;, this property is required href: string, basePath?: string, linkRef?: React.RefObject&amp;lt;HTMLAnchorElement&amp;gt; } export const Link: React.FC&amp;lt;LinkProps&amp;gt; Basic This component is the preferred method of navigation, alongside the navigate function.
This component takes all the same parameters as the built-in &amp;lt;a&amp;gt; tag. It&amp;rsquo;s onClick will be extended to perform local navigation, and if it is inside a component returned from useRoutes it will have the provided basePath preprended to its href.</description></item><item><title>ActiveLink</title><link>https://kyeotic.github.io/raviger/api/activelink/</link><pubDate>Mon, 30 Sep 2019 18:21:44 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/activelink/</guid><description>Like the standard Link component, but with built-in className transormation when a matching path is detected.
API export interface ActiveLinkProps extends LinkProps { activeClass?: string exactActiveClass?: string } export const ActiveLink: React.FC&amp;lt;ActiveLinkProps&amp;gt; Basic Just like &amp;lt;Link&amp;gt;, but with two additional properties for modifying the className
activeClass If the href matches the start of the current path this will be appended to the &amp;lt;a&amp;gt; className. exactActiveClass If the href matches the cirrent path exactly this will be appended to the &amp;lt;a&amp;gt; className.</description></item><item><title>Redirect</title><link>https://kyeotic.github.io/raviger/api/redirect/</link><pubDate>Wed, 04 Mar 2020 20:17:12 -0800</pubDate><guid>https://kyeotic.github.io/raviger/api/redirect/</guid><description>A React component for causing a browser redirect
API export interface RedirectProps { to: string replace?: boolean merge?: boolean } export const Redirect: React.FC&amp;lt;RedirectProps&amp;gt; Basic If rendered this component will force a redirect. Usefult as a route function
import { useRoutes, Redirect } from &amp;#39;raviger&amp;#39; const routes = { &amp;#39;/&amp;#39;: ({ title }) =&amp;gt; &amp;lt;Home title={title} /&amp;gt;, &amp;#39;/about&amp;#39;: ({ title }) =&amp;gt; &amp;lt;About /&amp;gt;, &amp;#39;/redirect&amp;#39;: () =&amp;gt; &amp;lt;Redirect to=&amp;#39;/about&amp;#39; /&amp;gt; } export default function App() { let route = useRoutes(routes) return ( &amp;lt;div&amp;gt; {route} &amp;lt;/div&amp;gt; ) } By default it will navigate with replace and merge both true.</description></item><item><title>navigate</title><link>https://kyeotic.github.io/raviger/api/navigate/</link><pubDate>Mon, 30 Sep 2019 18:25:04 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/navigate/</guid><description>This function causes programmatic navigation and causes all raviger hooks to re-render. Internally it used by the &amp;lt;Link&amp;gt; component.
API export function navigate(url: string, replace?: boolean): void export function navigate( url: string, query?: QueryParam | URLSearchParams, replace?: boolean ): void Basic the navigate function is intended to be used outside of components to perform page navigation programmatically.
import { navigate } from &amp;#39;raviger&amp;#39; export async function createUser () { let user = await createUser() navigate(`/users/${user.</description></item><item><title>useQueryParams</title><link>https://kyeotic.github.io/raviger/api/usequeryparams/</link><pubDate>Mon, 30 Sep 2019 18:42:44 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/usequeryparams/</guid><description>A hook for reading and updating the query string parameters on the page. Updates on all URL changes. Returns an array that, much like React&amp;rsquo;s own useState, has a value and a setter function. The value is a parsed querystring object, and the setter takes an object that it will serialize into the query string.
API export function useQueryParams( parseFn?: (query: string) =&amp;gt; QueryParam, serializeFn?: (query: QueryParam) =&amp;gt; string ): [QueryParam, (query: QueryParam, replace?</description></item><item><title>useNavigationPrompt</title><link>https://kyeotic.github.io/raviger/api/usenavigationprompt/</link><pubDate>Sat, 26 Oct 2019 11:32:24 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/usenavigationprompt/</guid><description>This hook causes a confirmation to block navigation.
API export function useNavigationPrompt( predicate = true, prompt?: string ): void Basic If predicate is truthy the user will be prompted if they try to navigate away from the page, either by leaving the site or through &amp;lt;Link&amp;gt; or navigate being invoked.
A standard prompt will be used if none is provided. Note: due to browser restrictions custom prompts are ignored when the user is trying to leave the site.</description></item><item><title>usePath</title><link>https://kyeotic.github.io/raviger/api/usepath/</link><pubDate>Mon, 30 Sep 2019 18:43:29 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/usepath/</guid><description>Get the current path of the page.
API export function usePath(basePath?: string): string</description></item><item><title>useBasePath</title><link>https://kyeotic.github.io/raviger/api/usebasepath/</link><pubDate>Mon, 30 Sep 2019 18:42:29 -0700</pubDate><guid>https://kyeotic.github.io/raviger/api/usebasepath/</guid><description>Get the basePath set by a parent useRoutes component (empty string if none)
API export function useBasePath(): string Basic import { useRoutes, useBasePath } from &amp;#39;raviger&amp;#39; function Home () { let basePath = useBasePath() // Will be &amp;#39;app&amp;#39; when render by the parent below return &amp;lt;span&amp;gt;{basePath}&amp;lt;/span&amp;gt; } const routes = { &amp;#39;/&amp;#39;: () =&amp;gt; &amp;lt;Home /&amp;gt; } export default function App() { return useRoutes(routes, { basePath: &amp;#39;app&amp;#39; }) ) }</description></item><item><title>useHash</title><link>https://kyeotic.github.io/raviger/api/usehash/</link><pubDate>Wed, 04 Mar 2020 20:17:16 -0800</pubDate><guid>https://kyeotic.github.io/raviger/api/usehash/</guid><description>A hook for getting the current hash of the page. Will cause re-renders when the hash changes.
API export function useHash(options?: { stripHash?: boolean }): string stripHash If options.stripHash is true the hash will be returned without the literal &amp;ldquo;#&amp;rdquo; at the beginning. If you need the &amp;ldquo;#&amp;rdquo; set options.stripHash to false. default = true</description></item><item><title>useLocationChange</title><link>https://kyeotic.github.io/raviger/api/uselocationchange/</link><pubDate>Tue, 05 Nov 2019 09:44:14 -0800</pubDate><guid>https://kyeotic.github.io/raviger/api/uselocationchange/</guid><description>This hook invokes a setter whenever the page location is updated.
API export function useLocationChange( setFn: (path: string) =&amp;gt; any, options?: { inheritBasePath: boolean basePath: string isActive: () =&amp;gt; boolean | boolean } ): void Note: options.inheritBasePath is treated as true unless it is set to false (even if options is not provided), and takes precedence over options.basePath if true. If no BasePath is in the context to inherit options.</description></item></channel></rss>